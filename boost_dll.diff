diff --git a/src/snopt7.cpp b/src/snopt7.cpp
index 7f42dd0..250140c 100644
--- a/src/snopt7.cpp
+++ b/src/snopt7.cpp
@@ -555,33 +555,34 @@ pagmo::population snopt7::evolve_version(pagmo::population &pop) const
         }
         boost::dll::shared_library libsnopt7_c(path_to_lib);
         // We then load the symbols we need for the SNOPT7 plugin
-        snInit = boost::dll::import<void(snProblem *, char *, char *,
-                                         int)>( // type of the function to import
-            libsnopt7_c,                        // the library
-            "snInit"                            // name of the function to import
+        snInit = boost::dll::import_symbol<void(snProblem *, char *, char *,
+                                                int)>( // type of the function to import
+            libsnopt7_c,                               // the library
+            "snInit"                                   // name of the function to import
         );
 
-        setIntParameter = boost::dll::import<int(snProblem *, char[], int)>( // type of the function to import
-            libsnopt7_c,                                                     // the library
-            "setIntParameter"                                                // name of the function to import
+        setIntParameter = boost::dll::import_symbol<int(snProblem *, char[], int)>( // type of the function to import
+            libsnopt7_c,                                                            // the library
+            "setIntParameter"                                                       // name of the function to import
         );
 
-        setRealParameter = boost::dll::import<int(snProblem *, char[], double)>( // type of the function to import
-            libsnopt7_c,                                                         // the library
-            "setRealParameter"                                                   // name of the function to import
-        );
+        setRealParameter
+            = boost::dll::import_symbol<int(snProblem *, char[], double)>( // type of the function to import
+                libsnopt7_c,                                               // the library
+                "setRealParameter"                                         // name of the function to import
+            );
 
-        deleteSNOPT = boost::dll::import<void(snProblem *)>( // type of the function to import
-            libsnopt7_c,                                     // the library
-            "deleteSNOPT"                                    // name of the function to import
+        deleteSNOPT = boost::dll::import_symbol<void(snProblem *)>( // type of the function to import
+            libsnopt7_c,                                            // the library
+            "deleteSNOPT"                                           // name of the function to import
         );
 
-        solveA = boost::dll::import<int(snProblem *, int, int, int, double, int, snFunA, int, int *, int *, double *,
-                                        int, int *, int *, double *, double *, double *, double *, double *, int *,
-                                        double *, double *, int *, double *, int *, int *,
-                                        double *)>( // type of the function to import
-            libsnopt7_c,                            // the library
-            "solveA"                                // name of the function to import
+        solveA = boost::dll::import_symbol<int(snProblem *, int, int, int, double, int, snFunA, int, int *, int *,
+                                               double *, int, int *, int *, double *, double *, double *, double *,
+                                               double *, int *, double *, double *, int *, double *, int *, int *,
+                                               double *)>( // type of the function to import
+            libsnopt7_c,                                   // the library
+            "solveA"                                       // name of the function to import
         );
     } catch (const std::exception &e) {
         std::string message(
diff --git a/src/worhp.cpp b/src/worhp.cpp
index 79e8d47..6856b44 100644
--- a/src/worhp.cpp
+++ b/src/worhp.cpp
@@ -209,85 +209,88 @@ population worhp::evolve(population pop) const
         }
         boost::dll::shared_library libworhp(library_filename);
         // We then load the symbols we need for the WORHP plugin
-        WorhpPreInit = boost::dll::import<void(OptVar *, Workspace *, Params *,
-                                               Control *)>( // type of the function to import
-            libworhp,                                       // the library
-            "WorhpPreInit"                                  // name of the function to import
-        );
-        WorhpInit = boost::dll::import<void(OptVar *, Workspace *, Params *,
-                                            Control *)>( // type of the function to import
-            libworhp,                                    // the library
-            "WorhpInit"                                  // name of the function to import
+        WorhpPreInit = boost::dll::import_symbol<void(OptVar *, Workspace *, Params *,
+                                                      Control *)>( // type of the function to import
+            libworhp,                                              // the library
+            "WorhpPreInit"                                         // name of the function to import
         );
-        WorhpDiag = boost::dll::import<void(OptVar *, Workspace *, Params *,
-                                            Control *)>( // type of the function to import
-            libworhp,                                    // the library
-            "WorhpDiag"                                  // name of the function to import
+        WorhpInit = boost::dll::import_symbol<void(OptVar *, Workspace *, Params *,
+                                                   Control *)>( // type of the function to import
+            libworhp,                                           // the library
+            "WorhpInit"                                         // name of the function to import
         );
-        ReadParams = boost::dll::import<void(int *, const char[], Params *)>( // type of the function to import
-            libworhp,                                                   // the library
-            "ReadParams"                                                // name of the function to import
+        WorhpDiag = boost::dll::import_symbol<void(OptVar *, Workspace *, Params *,
+                                                   Control *)>( // type of the function to import
+            libworhp,                                           // the library
+            "WorhpDiag"                                         // name of the function to import
         );
-        SetWorhpPrint = boost::dll::import<void(worhp_print_t)>( // type of the function to import
-            libworhp,                                            // the library
-            "SetWorhpPrint"                                      // name of the function to import
+        ReadParams = boost::dll::import_symbol<void(int *, const char[], Params *)>( // type of the function to import
+            libworhp,                                                                // the library
+            "ReadParams"                                                             // name of the function to import
         );
-        GetUserAction = boost::dll::import<bool(const Control *, int)>( // type of the function to import
+        SetWorhpPrint = boost::dll::import_symbol<void(worhp_print_t)>( // type of the function to import
             libworhp,                                                   // the library
-            "GetUserAction"                                             // name of the function to import
-        );
-        DoneUserAction = boost::dll::import<void(Control *, int)>( // type of the function to import
-            libworhp,                                              // the library
-            "DoneUserAction"                                       // name of the function to import
+            "SetWorhpPrint"                                             // name of the function to import
         );
-        IterationOutput = boost::dll::import<void(OptVar *, Workspace *, Params *,
-                                                  Control *)>( // type of the function to import
-            libworhp,                                          // the library
-            "IterationOutput"                                  // name of the function to import
+        GetUserAction = boost::dll::import_symbol<bool(const Control *, int)>( // type of the function to import
+            libworhp,                                                          // the library
+            "GetUserAction"                                                    // name of the function to import
         );
-        Worhp = boost::dll::import<void(OptVar *, Workspace *, Params *,
-                                        Control *)>( // type of the function to import
-            libworhp,                                // the library
-            "Worhp"                                  // name of the function to import
+        DoneUserAction = boost::dll::import_symbol<void(Control *, int)>( // type of the function to import
+            libworhp,                                                     // the library
+            "DoneUserAction"                                              // name of the function to import
         );
-        StatusMsg = boost::dll::import<void(OptVar *, Workspace *, Params *,
-                                            Control *)>( // type of the function to import
-            libworhp,                                    // the library
-            "StatusMsg"                                  // name of the function to import
+        IterationOutput = boost::dll::import_symbol<void(OptVar *, Workspace *, Params *,
+                                                         Control *)>( // type of the function to import
+            libworhp,                                                 // the library
+            "IterationOutput"                                         // name of the function to import
         );
-        StatusMsgString = boost::dll::import<void(OptVar *, Workspace *, Params *, Control *,
-                                                  char message[])>( // type of the function to import
-            libworhp,                                               // the library
-            "StatusMsgString"                                       // name of the function to import
+        Worhp = boost::dll::import_symbol<void(OptVar *, Workspace *, Params *,
+                                               Control *)>( // type of the function to import
+            libworhp,                                       // the library
+            "Worhp"                                         // name of the function to import
         );
-        WorhpSetBoolParam = boost::dll::import<bool(Params *, const char *, bool)>( // type of the function to import
-            libworhp,                                                               // the library
-            "WorhpSetBoolParam"                                                     // name of the function to import
+        StatusMsg = boost::dll::import_symbol<void(OptVar *, Workspace *, Params *,
+                                                   Control *)>( // type of the function to import
+            libworhp,                                           // the library
+            "StatusMsg"                                         // name of the function to import
         );
-        WorhpSetIntParam = boost::dll::import<bool(Params *, const char *, int)>( // type of the function to import
-            libworhp,                                                             // the library
-            "WorhpSetIntParam"                                                    // name of the function to import
+        StatusMsgString = boost::dll::import_symbol<void(OptVar *, Workspace *, Params *, Control *,
+                                                         char message[])>( // type of the function to import
+            libworhp,                                                      // the library
+            "StatusMsgString"                                              // name of the function to import
         );
+        WorhpSetBoolParam
+            = boost::dll::import_symbol<bool(Params *, const char *, bool)>( // type of the function to import
+                libworhp,                                                    // the library
+                "WorhpSetBoolParam"                                          // name of the function to import
+            );
+        WorhpSetIntParam
+            = boost::dll::import_symbol<bool(Params *, const char *, int)>( // type of the function to import
+                libworhp,                                                   // the library
+                "WorhpSetIntParam"                                          // name of the function to import
+            );
         WorhpSetDoubleParam
-            = boost::dll::import<bool(Params *, const char *, double)>( // type of the function to import
-                libworhp,                                               // the library
-                "WorhpSetDoubleParam"                                   // name of the function to import
+            = boost::dll::import_symbol<bool(Params *, const char *, double)>( // type of the function to import
+                libworhp,                                                      // the library
+                "WorhpSetDoubleParam"                                          // name of the function to import
             );
-        WorhpFree = boost::dll::import<void(OptVar *, Workspace *, Params *,
-                                            Control *)>( // type of the function to import
-            libworhp,                                    // the library
-            "WorhpFree"                                  // name of the function to import
+        WorhpFree = boost::dll::import_symbol<void(OptVar *, Workspace *, Params *,
+                                                   Control *)>( // type of the function to import
+            libworhp,                                           // the library
+            "WorhpFree"                                         // name of the function to import
         );
-        WorhpFidif = boost::dll::import<void(OptVar *, Workspace *, Params *,
-                                             Control *)>( // type of the function to import
-            libworhp,                                     // the library
-            "WorhpFidif"                                  // name of the function to import
-        );
-        WorhpVersion = boost::dll::import<void(int *major, int *minor,
-                                               char patch[PATCH_STRING_LENGTH])>( // type of the function to import
-            libworhp,                                                             // the library
-            "WorhpVersion"                                                        // name of the function to import
+        WorhpFidif = boost::dll::import_symbol<void(OptVar *, Workspace *, Params *,
+                                                    Control *)>( // type of the function to import
+            libworhp,                                            // the library
+            "WorhpFidif"                                         // name of the function to import
         );
+        WorhpVersion
+            = boost::dll::import_symbol<void(int *major, int *minor,
+                                             char patch[PATCH_STRING_LENGTH])>( // type of the function to import
+                libworhp,                                                       // the library
+                "WorhpVersion"                                                  // name of the function to import
+            );
     } catch (const std::exception &e) {
         std::string message(
             R"(
